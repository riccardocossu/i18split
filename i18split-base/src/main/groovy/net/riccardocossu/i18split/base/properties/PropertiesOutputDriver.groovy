package net.riccardocossu.i18split.base.properties;

import net.riccardocossu.i18split.base.config.ConfigKeys
import net.riccardocossu.i18split.base.driver.OutputDriver
import net.riccardocossu.i18split.base.model.DataRow

import org.apache.commons.configuration.Configuration

public class PropertiesOutputDriver implements OutputDriver {

	private static final String GENERATED_BY = "Generated by i18split"
	public static final String CONFIG_KEY_FILES_NAME = "i18split.output.properties.fileName.prefix"
	@Deprecated
	public static final String CONFIG_KEY_FILES_NAME_OLD = "i18split.output.properties.fileName.suffix"
	public static final String CONFIG_KEY_IS_XML = "i18split.output.properties.isXml"
	private String[] keys
	private String fileNamePrefix
	private boolean isXml = false
	private String dirOut
	private String encoding
	private Map<String,Properties> result
	private static final String SHORT_NAME = "properties.output"
	private String defaultColumn

	@Override
	public String[] init(Configuration configuration) {
		keys = configuration.getStringArray(ConfigKeys.INPUT_KEYS)
		fileNamePrefix = configuration.getString(CONFIG_KEY_FILES_NAME,configuration.getString(CONFIG_KEY_FILES_NAME_OLD,"messages"))
		isXml = configuration.getBoolean(CONFIG_KEY_IS_XML,false)
		dirOut = configuration.getString(ConfigKeys.OUTPUT_BASE_PATH)
		encoding = configuration.getString(ConfigKeys.OUTPUT_ENCODING,"UTF-8")
		defaultColumn = configuration.getString(ConfigKeys.DEFAULT_COLUMN,"default")
		result = [:]
		keys.each { k ->
			result[k] = new Properties()
		}
		return keys
	}

	@Override
	public String getShortName() {
		return SHORT_NAME
	}

	@Override
	public void close() throws IOException {
		keys.each { k ->
			Properties target = result[k]
			def suffix = k.equals(defaultColumn) ? '':"_${k}".toString()
			def fnStandard = "${fileNamePrefix}${suffix}.xml".toString()
			def fnXml = "${fileNamePrefix}${suffix}.properties".toString()
			def fileName = isXml ? fnStandard : fnXml
			new File(dirOut, fileName).withOutputStream { s ->
				if(isXml) {
					target.storeToXML(s, GENERATED_BY,encoding)
				} else {
					target.store(s, GENERATED_BY)
				}
			}
		}
	}

	@Override
	public void writeRow(DataRow data) {
		String key = data.key
		keys.each { k ->
			Properties target = result[k]
			target.setProperty(key,data.values[k])
		}
	}
}
